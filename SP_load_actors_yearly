CREATE OR REPLACE PROCEDURE load_actors_yearly(start_year INT, end_year INT)
LANGUAGE plpgsql
AS $$
DECLARE
    y INT;
BEGIN
    FOR y IN start_year .. end_year - 1 LOOP
        EXECUTE format($sql$
            WITH last_year AS (
                SELECT *
                FROM actors
                WHERE current_year = %s
            ),
            this_year AS (
                SELECT actor, actorid, film, votes, rating, filmid, year
                FROM actor_films
                WHERE year = %s
            ),
            this_year_aggregated AS (
                SELECT
                    actorid,
                    actor,
                    ARRAY_AGG(ROW(film, votes, rating, filmid, year)::film_type) AS films,
                    AVG(rating) AS avg_rating
                FROM this_year
                GROUP BY actorid, actor
            )
            INSERT INTO actors (actor, actorid, films, quality_class, is_active, current_year)
            SELECT
                COALESCE(ly.actor, ty.actor),
                COALESCE(ly.actorid, ty.actorid),
                COALESCE(ly.films, ARRAY[]::film_type[]) ||
                    COALESCE(ty.films, ARRAY[]::film_type[]),
                CASE
                    WHEN ty.avg_rating > 8 THEN 'star'::quality_class
                    WHEN ty.avg_rating > 7 THEN 'good'::quality_class
                    WHEN ty.avg_rating > 6 THEN 'average'::quality_class
                    ELSE 'bad'::quality_class
                END,
                ty.actorid IS NOT NULL,
                %s
            FROM last_year ly
            FULL OUTER JOIN this_year_aggregated ty
            ON ly.actorid = ty.actorid
            ON CONFLICT (actorid)
            DO UPDATE SET
                actor = EXCLUDED.actor,
                films = EXCLUDED.films,
                quality_class = EXCLUDED.quality_class,
                is_active = EXCLUDED.is_active,
                current_year = EXCLUDED.current_year;
        $sql$, y, y + 1, y + 1);
    END LOOP;
END;
$$;
